{
  "name": "APIM Single Api Stats",
  "id": "APIMSingleApiStats",
  "thumbnailURL": "", 
  "configs": {
    "pubsub": {
      "types": ["subscriber"]
    },
    "providerConfig" : {
      "configs": {
        "type": "SiddhiStoreDataProvider",
        "config": {
          "siddhiApp": "@App:name('APIM_ERROR_SUMMARY') define stream Request (meta_clientType string, applicationConsumerKey string, applicationName string, applicationId string, applicationOwner string, apiContext string, apiName string, apiVersion string, apiResourcePath string, apiResourceTemplate string, apiMethod string, apiCreator string, apiCreatorTenantDomain string, apiTier string, apiHostname string, username string, userTenantDomain string, userIp string, userAgent string, requestTimestamp long, throttledOut bool, responseTime long, serviceTime long, backendTime long, responseCacheHit bool, responseSize long, protocol string, responseCode int, destination string, securityLatency long, throttlingLatency long, requestMedLat long, responseMedLat long, backendLatency long, otherLatency long, gatewayType string, label string); @store(type = 'rdbms', datasource = 'APIM_ANALYTICS_DB') @purge(enable='true', interval='60 min', @retentionPeriod(sec='1 day', min='72 hours', hours='90 days', days='1 year', months='2 years', years='3 years')) define aggregation ApiErroranalysisAgg from Request select apiName, apiVersion, apiMethod, apiResourceTemplate, responseCode, apiContext, sum(backendLatency) as backendLatency, sum(otherLatency) as otherLatency, sum(responseTime) as responseLatency, count() as totalRequestCount, apiCreator, apiCreatorTenantDomain, applicationName, label group by apiName, apiVersion, responseCode, apiResourceTemplate aggregate by requestTimestamp every seconds...years;",
          "queryData": {
            "apiListQuery":"from ApiErroranalysisAgg on apiCreatorTenantDomain=='{{tenantDomain}}' within {{from}}L, {{to}}L per \"{{per}}s\" select apiName, apiVersion group by apiName, apiVersion;",
            "resourceTemplates":"from ApiErroranalysisAgg on (apiCreatorTenantDomain=='{{tenantDomain}}' and apiName == '{{apiname}}' and apiVersion == '{{apiVersion}}') select apiResourceTemplate group by apiResourceTemplate order by apiResourceTemplate;",
            "apiUsageQuery": "from ApiErroranalysisAgg on apiCreatorTenantDomain=='{{tenantDomain}}' within {{from}}L, {{to}}L per \"{{per}}s\" select apiName, apiMethod, sum(totalRequestCount) as totalreqcount, responseCode, backendLatency group by apiMethod, apiVersion, responseCode order by apiName;",
            "latencyQuery": "from ApiErroranalysisAgg on (apiCreatorTenantDomain=='{{tenantDomain}}' and apiName == '{{apiname}}' and apiVersion == '{{apiVersion}}') within {{from}}L, {{to}}L per \"{{per}}s\" select apiName, AGG_TIMESTAMP, sum(totalRequestCount) as counts, sum(responseLatency) as latency group by AGG_TIMESTAMP order by AGG_TIMESTAMP;",
            "trafficQuery": "from ApiErroranalysisAgg on (apiName == '{{apiname}}' and apiVersion == '{{apiVersion}}') within {{from}}L, {{to}}L per \"{{per}}s\" select apiName, AGG_TIMESTAMP, sum(totalRequestCount) as counts  group by AGG_TIMESTAMP order by AGG_TIMESTAMP;",
            "errorQuery": "from ApiErroranalysisAgg on (responseCode > 399 and apiName == '{{apiname}}' and apiVersion == '{{apiVersion}}') within {{from}}L, {{to}}L per \"{{per}}s\" select apiName, responseCode, sum(totalRequestCount) as count, AGG_TIMESTAMP group by AGG_TIMESTAMP order by AGG_TIMESTAMP;",
            "totalErrorQuery": "from ApiErroranalysisAgg on (responseCode > 399 and apiName == '{{apiname}}' and apiVersion == '{{apiVersion}}') within {{from}}L, {{to}}L per \"{{per}}s\" select apiResourceTemplate, sum(totalRequestCount) as count group by apiResourceTemplate order by apiResourceTemplate;",
            "totalReqCountQuery": "from ApiErroranalysisAgg on (apiName == '{{apiname}}' and apiVersion == '{{apiVersion}}') within {{from}}L, {{to}}L per \"{{per}}s\" select apiResourceTemplate, sum(totalRequestCount) as count group by apiResourceTemplate order by apiResourceTemplate;"
          },
          "publishingInterval": 60,
          "apiname": "{{ apiname }}"
        }
      }
    },
    "options": [
      {
        "id": "header",
        "title": "Header",
        "type": {
          "name": "BOOLEAN",
          "possibleValues": [
            true,
            false
          ]
        },
        "defaultValue": true
      }
    ]
  }
}
