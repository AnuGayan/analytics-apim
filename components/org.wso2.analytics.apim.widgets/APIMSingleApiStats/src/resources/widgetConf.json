{
  "name": "APIM Single Api Stats",
  "id": "APIMSingleApiStats",
  "thumbnailURL": "", 
  "configs": {
    "pubsub": {
      "types": ["subscriber","publisher"]
    },
    "providerConfig" : {
      "configs": {
        "type": "SiddhiStoreDataProvider",
        "config": {
          "siddhiApp": "@App:name('APIM_ERROR_SUMMARY') define stream Request (meta_clientType string, applicationConsumerKey string, applicationName string, applicationId string, applicationOwner string, apiContext string,apiName string, apiVersion string, apiResourcePath string, apiResourceTemplate string, apiMethod string, apiCreator string, apiCreatorTenantDomain string, apiTier string, apiHostname string, username string, userTenantDomain string, userIp string, userAgent string, requestTimestamp long, throttledOut bool, responseTime long, serviceTime long, backendTime long, responseCacheHit bool, responseSize long, protocol string, responseCode int, destination string, securityLatency long, throttlingLatency long, requestMedLat long, responseMedLat long, backendLatency long, otherLatency long, gatewayType string, label string); @store(type = 'rdbms', datasource = 'APIM_ANALYTICS_DB') @purge(enable='true', interval='60 min', @retentionPeriod(sec='1 day', min='72 hours', hours='90 days', days='1 year', months='2 years', years='3 years')) define aggregation ApiErroranalysisAgg from Request select apiName, apiVersion, apiMethod, apiResourceTemplate, responseCode, apiContext, sum(backendLatency) as backendLatency, sum(otherLatency) as otherLatency, count() as totalRequestCount, applicationName, label group by apiResourceTemplate aggregate by requestTimestamp every seconds...years;",
          "queryData": {
            "resourcetemplates":"from ApiErroranalysisAgg on (apiName == '{{apiname}}') select apiResourceTemplate group by apiResourceTemplate order by apiResourceTemplate;",
            "apiusagequery": "from ApiErroranalysisAgg within {{from}}L, {{to}}L per \"{{per}}s\" select apiName, apiMethod, totalRequestCount, responseCode, backendLatency group by apiMethod, responseCode order by apiName;",
            "latencyquery": "from ApiErroranalysisAgg on apiName == '{{apiname}}' within {{from}}L, {{to}}L per \"{{per}}s\" select apiName, AGG_TIMESTAMP, totalRequestCount as counts, backendLatency group by AGG_TIMESTAMP order by AGG_TIMESTAMP;",
            "trafficquery": "from ApiErroranalysisAgg on apiName == '{{apiname}}' within {{from}}L, {{to}}L per \"{{per}}s\" select apiName, AGG_TIMESTAMP, totalRequestCount as counts  group by AGG_TIMESTAMP order by AGG_TIMESTAMP;",
            "errorquery": "from ApiErroranalysisAgg on (responseCode > 400 and apiName == '{{apiname}}') within {{from}}L, {{to}}L per \"{{per}}s\" select apiName, responseCode, totalRequestCount, AGG_TIMESTAMP group by AGG_TIMESTAMP order by AGG_TIMESTAMP;",
            "totalerrorQuery": "from ApiErroranalysisAgg on (responseCode > 399 and apiName == '{{apiname}}') within {{from}}L, {{to}}L per \"{{per}}s\" select apiResourceTemplate, totalRequestCount group by apiResourceTemplate order by apiResourceTemplate;",
            "totalReqCountQuery": "from ApiErroranalysisAgg on (apiName == '{{apiname}}') within {{from}}L, {{to}}L per \"{{per}}s\" select apiResourceTemplate, totalRequestCount group by apiResourceTemplate order by apiResourceTemplate;"
          },
          "publishingInterval": 60,
          "apiname": "{{ apiname }}"
        }
      }
    },
    "options": [
      {
        "id": "header",
        "title": "Header",
        "type": {
          "name": "BOOLEAN",
          "possibleValues": [
            true,
            false
          ]
        },
        "defaultValue": true
      }
    ]
  }
}
